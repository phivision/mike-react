type UserProfile @model(subscriptions: null) @searchable
@auth(rules: [{ allow: owner, operations: [create, delete, update] },
  { allow: private, operations: [read]},
  { allow: public, provider: iam, operations: [read]}])
@key(name: "profilesByStripeID", fields: ["StripeID"], queryField: "profilesByStripeID")
{
  id: ID!
  Birthday: AWSDate
  Email: AWSEmail
  Gender: String
  Height: Float
  RegDate: String!
  StripeID: String
  UserImage: String
  BgImage: String
  BgTitle: String
  LastName: String
  FirstName: String
  UserRole: String!
  Weight: Float
  Description: String
  Biography: String
  """
  A list of user's favorite contents
  """
  Favorites: [UserFavoriteContent] @connection(name: "byFavoriteContent")
  """
  A list of contents generated by the user aka the creator or trainer
  """
  Contents: [UserContent] @connection(keyName: "byContent", fields: ["id"])
  """
  A list of subscriptions which is being paid or has been paid by the user
  """
  Subscriptions: [UserSubscriptionTrainer] @connection(name: "byUserSubscription")
  """
  A list of users who is subscripting to one or a few trainers
  """
  Users: [UserSubscriptionTrainer] @connection(name: "bySubscriptedTrainer")
}

# create a join model and disable query for m2m relationship
type UserSubscriptionTrainer @model(subscriptions: null)
@auth(rules: [{ allow: owner, operations: [create, delete, update] },
  { allow: private, operations: [read]},
  { allow: public, provider: iam, operations: [read]}]){
  id: ID!
  StripeID: String!
  ExpireDate: AWSDate!
  CancelAtPeriodEnd: Boolean!
  Trainer: UserProfile! @connection(name: "bySubscriptedTrainer")
  User: UserProfile! @connection(name: "byUserSubscription")
}

type UserFavoriteContent @model(queries: null, subscriptions: null)
@auth(rules: [{ allow: owner, operations: [create, delete, update] },
  { allow: private, operations: [read]},
  { allow: public, provider: iam, operations: [read]}]){
  id: ID!
  User: UserProfile! @connection(name: "byFavoriteContent")
  Content: UserContent! @connection(name: "byFavoriteUser")
}

type UserContent @model(subscriptions: null)
@auth(rules: [{ allow: owner, operations: [create, delete, update] },
  { allow: private, operations: [read]},
  { allow: public, provider: iam, operations: [read]}])
@key(name: "byContent", fields: ["CreatorID", "ContentName"])
@key(name: "byName", fields: ["ContentName"], queryField: "contentByName")
{
  id: ID!
  """
  The ID of the user who created and own this content
  """
  CreatorID: ID!
  ContentName: String!
  Description: String
  Title: String
  """
  The level indicates the difficulty of the training course, e.g. 1 => easy, 2=> medium, 3=>hard
  """
  Level: Int
  Length: Float
  IsDemo: Boolean
  TranscodeReady: Boolean
  ViewCount: Int
  Thumbnail: String
  Preview: String
  Segments: AWSJSON
  Creator: UserProfile @connection(fields: ["CreatorID"])
  """
  A list of users who like this content
  """
  FavoriteUser: [UserFavoriteContent] @connection(name: "byFavoriteUser")
}

type Subscription {
  onContentByCreatorID(CreatorID: ID!): UserContent @aws_subscribe(mutations: ["createUserContent"])
}